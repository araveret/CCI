set.seed(973487) # Ensures you can repeat the results
library(caret)
library(rpart)
# Load and partition data
setwd("C:/Users/josdavis/Documents")
titanic = read.table("titanic.csv", sep = ",", header = TRUE)
idx = createDataPartition(titanic$survived, p = 0.50,list=FALSE)
train = titanic[idx,]
test = titanic[-idx,]
# Train the tree
model1 = rpart(as.factor(survived) ~ pclass + sex + age + sibsp, data = train)
# Plot the tree
library(partykit)
plot(as.party(model1))
round(model1$variable.importance, 1)
pred1.is = predict(model1, newdata = train, type = "class")
pred1.os = predict(model1, newdata = test, type = "class")
sum(pred1.is == train$survived) / length(train$survived)
sum(pred1.os == test$survived) / length(test$survived)
table(pred1.is, train$survived)
100*round(prop.table(table(pred1.is, train$survived)), 2) # % of values in each bucket
100*round(prop.table(table(pred1.is, train$survived)), 3) # % of values in each bucket
round(prop.table(table(pred1.is, train$survived)), 2) # % of values in each bucket
round(prop.table(table(pred1.is, train$survived), 1), 2) # Across then down
round(prop.table(table(pred1.is, train$survived), 2)) # Down then across
prop.table(table(pred1.is, train$survived), 2)# Down then across
round(prop.table(table(pred1.is, train$survived), 2), 2) # Down then across
?ls
rm(list = ls())
gc()
getwd()
setwd("C:/Users/josdavis/Documents")
setwd("C:/Users/josdavis/Downloads")
getwd()
setwd("C:/Users/josdavis/Documents")
data = read.table("titanic.csv", sep = ",", header = TRUE)
str(data)
head(data, 8)
summary(data)
str(data$age)
head(data$age, 8)
summary(data$age)
write.table(data[1:100,], "newdata.csv", sep = ",", row.names = FALSE)
getwd()
titanic = read.table("titanic.csv", sep = ",", header = TRUE)
sample = read.table("titanic.csv", sep = ",", header = TRUE)
save.image("titanic.RData")
rm(list = ls()); gc()
load("titanic.RData")
rm(sample, titanic)
gc()
data$age2 = data$age
head(data)
subs = data[data$age>30 & data$pclass == "3rd", ]
summary(subs) # Only take the 3rd class people over 30
summary(data)
View(data)
View(subs)
dim(subs)
dim(subs)[1]
dim(subs)[1] / dim(data)[1] # % of observations in the subsetted data
summary(data$age)
mean(data$age2)
mean(data$age2, na.rm = TRUE)
data$age2[is.na(data$age2)]
is.na(data$age2)
is.na(data$age2)
data$age2[is.na(data$age2)]
rm(list=ls()) # clear the workspace
set.seed(973487) # Ensures you can repeat the results
library(caret)
library(rpart)
setwd("C:/Users/josdavis/Documents")
titanic = read.table("titanic.csv", sep = ",", header = TRUE)
idx = createDataPartition(titanic$survived, p = 0.50,list=FALSE)
train = titanic[idx,]
test = titanic[-idx,]
model1 = rpart(as.factor(survived) ~ pclass + sex + age + sibsp, data = train)
library(partykit)
plot(as.party(model1))
names(model1)
round(model1$variable.importance, 1)
pred1.is = predict(model1, newdata = train, type = "class")
pred1.os = predict(model1, newdata = test, type = "class")
head(pred1.is)
head(train$survived)
head(train$survived)
sum(pred1.is == train$survived) / length(train$survived)
sum(pred1.os == test$survived) / length(test$survived)
table(pred1.is, train$survived)
table(pred1.os, test$survived)
round(prop.table(table(pred1.is, train$survived)), 2) # % of values in each bucket
prop.table(table(pred1.is, train$survived)) # % of values in each bucket
round(prop.table(table(pred1.is, train$survived), 1), 2) # Across (based on predictions)
round(prop.table(table(pred1.is, train$survived), 2), 2) # Down (based on actuals)
?predict
?predict.rpart
pred1.is = predict(model1, newdata = train, type = "prob")
head(pred1.is)
head(pred1.is[,2])
head(pred1.is[,1])
pred1.is = predict(model1, newdata = train, type = "vector")
head(pred1.is)
datasets()
dataset()
data()
data(package = .packages(all.available = TRUE))
datasets()
UN
data()
BOD
UN
data(package = .packages(all.available = TRUE))
cynipids
data(cynipids)
load(cynipids)
load(url('http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.sav'))
View(titanic3)
fruits = c('apple', 'banana', 'cherry', 'plum')
len(fruits)
length(fruits)
for (i in 1:length(fruits)){
print fruits[i]
}
fruits = c('apple', 'banana', 'cherry', 'plum')
for (i in 1:length(fruits)){
print fruits[i]
}
for (i in 1:length(fruits)){
fruits[i]
}
print(fruits[1])
for (i in 1:length(fruits)){
print(fruits[i])
}
var1 = 10
if (var1 > 5){
print("More than 5")
}
else(var1 < 5){
print("Less than 5")
}
else{
print("5")
}
if(var1 > 5){
print("More than 5")
}
elseif(var1 < 5){
print("Less than 5")
}
elseif{
print("5")
}
var1 = 10
if (var1 > 5) {
print("More than 5")
} else (var1 < 5){
print("Less than 5")
} else {
print("5")
}
if (var1 > 5) {
print("More than 5")
} else if (var1 < 5){
print("Less than 5")
} else {
print("5")
}
if (var1 > 5) {
print("More than 5")
} else if (var1 < 5){
print("Less than 5")
} else {
print("5")
}
load("~/Projects/VA/Task 3/R Scripts/OPM Import.R")
install.packages("swirl")
library(swirl)
install_from_swirl("Regression Models")
rm(list=ls())     # clear the workspace
set.seed(973487)  # Ensures you can repeat the results
library(rpart)    # For creating the tree
library(partykit) # For plotting the tree
library(vcd)      # For mosaic plot
load(url('http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.sav'))
rand<-order(runif(dim(titanic3)[1]))  # Random indices
train <- titanic3[rand[1:655],]       # Training set
test <- titanic3[rand[656:1309],]     # Testing set
form <- as.formula(as.factor(survived) ~ pclass + sex + age + sibsp) # Specify the variables of interest
tree <- rpart(form, train)          # Create the tree
plot(as.party(tree))                # Plot the tree
round(tree$variable.importance, 1)
install.packages("RDatasets")
data(package = .packages(all.available = TRUE))
data(GermanCredit)
library(caret)
data(GermanCredit)
View(GermanCredit)
head(GermanCredit)
summary(GermanCredit)
dat <- data(GermanCredit)
dat
data(diabetes)
library(mclust)
data(diabetes)
summary(diabetes)
library(cluster)
data(votes.repub)
summary(votes.repub)
summary(GermanCredit)
summary(titanic3)
dim(titanic3)
library(datasets)
data(Titanic)
dim(Titanic)
Titanic
library(rpart.plot)
data(ptitanic)
View(ptitanic)
View(titanic3)
View(titanic3)
View(titanic3)
?rpart.plot
data(package = .packages(all.available = TRUE))
library(datasets)
data(AirPassengers)
summary(AirPassengers)
head(AirPassengers)
data(VADeaths)
summary(VADeaths)
library(sandwich)
data(Investment)
summary(Investment)
library(rpart.plot)
data(ptitanic)
rm(list=ls())     # clear the workspace
gc()
library(rpart.plot)
data(ptitanic)
head(ptitanic)
setwd("C:/Users/josdavis/Documents/Personal/GitHub/CCI")
write.csv(ptitanic, "titanic.csv", row.names = FALSE)
rm(list=ls())     # clear the workspace
set.seed(973487)  # Ensures you can repeat the results
library(rpart)    # For creating the tree
library(partykit) # For plotting the tree
setwd("C:/Users/josdavis/Documents/Personal/GitHub/CCI")
data <- read.csv("titanic.csv", header = TRUE)
summary(data)
dim(data)[1]
runif(dim(data)[1])
?runif
runif(dim(data)[1]) > 0.7
head(data)
tail(data)
nrows(data)
rows(data)
nrow(data)
idxs <- runif(nrow(data)) > 0.7
idxs
summary(idxs)
train <- data[idxs, ]
nrow(train)
idxs <- runif(nrow(data)) < 0.7   # Random Indices
train <- data[idxs, ]
idxs <- runif(nrow(data)) < 0.7   # Random Indices
train <- data[idxs, ]
test  <- data[~idxs, ]
test  <- data[!idxs, ]
summary(runif(1000))
plot(runif(1000))
hist(runif(1000))
idxs <- runif(nrow(data)) < 0.7   # Random Indices
train <- data[idxs, ]
test  <- data[!idxs, ]
head(train)
summary(train)
is.na(train$age)
summary(is.na(train$age))
summary(train)
form <- as.formula(as.factor(survived) ~ pclass + sex + age + sibsp + parch) # Specify the variables of interest
tree <- rpart(form, train)          # Create the tree
plot(as.party(tree))                # Plot the tree
?rpart
?na.rpart
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train, method = "class")
round(tree$variable.importance, 1)  # Check the importance (measured as avg. decrease in gini coefficient)
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train, method = "anova")
round(tree$variable.importance, 1)  # Check the importance (measured as avg. decrease in gini coefficient)
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train, method = "anova",
parms = "gini")
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train, method = "class",
parms = "gini")
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "anova",
parms = "gini")
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "anova",
parms = "gini")
tree
tree$cptable
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train)
tree
tree$method
tree$parms
tree$variable.importance
control
rpart.control
print(rpart.control)
?rpart.control
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class")
tree$variable.importance
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class")
tree$variable.importance
tree$var
tree$frame
tree$control
# Another example: maxdepth = 4 limits the depth of the tree to 4 splits
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class"
control = rpart.control(maxdepth = 3))
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class",
control = rpart.control(maxdepth = 3))
plot(as.party(tree))
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class",
control = rpart.control(maxdepth = 4))
plot(as.party(tree))
plot(tree)
predictions <- predict(tree, test)  # Generate the predictions for training and test set
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class",
na.action = na.omit)
tree$variable.importance
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class",
na.action = na.rpart)
tree$variable.importance
summary(tree)
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class",
na.action = na.omit)
summary(tree)
?rpart
summary(tree)
predictions <- predict(tree, test)  # Generate the predictions for training and test set
predictions
predict_proba <- predict(tree, test)
predict_proba <- predict_proba[,2] > 0.5
predict_proba
predict_proba <- predict(tree, test)  # Generate the predictions for training and test set
predict_proba <- predict(tree, test)[,2]
predict_class <- predict_proba > 0.5
head(test)
data$survived == 'survived'
data$survived = data$survived == 'survived'
idxs <- runif(nrow(data)) < 0.7   # Random Indices
train <- data[idxs, ]             # Training set
test  <- data[!idxs, ]            # Testing set
summary(train)
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class")
predict_proba <- predict(tree, test)[,2]
predict_class <- predict_proba > 0.5
predict_class == test$survived
nrow(test)
sum(predict_class == test$survived)
sum(predict_class == test$survived) / nrow(test)
test$predict_proba <- predict(tree, test)[,2]
test$prediction <- predict_proba > 0.5
sum(test$prediction == test$survived) / nrow(test)
test[test$survived,]
test_lived = test[test$survived,]
test_died = test[!test$survived,]
test_died
sum(test_lived$prediction == test_lived$survived) / nrow(test_lived)
sum(test_died$prediction == test_died$survived) / nrow(test_died)
pred.survival.test <- pred.test[,2]>0.5
actual.survival.test <- test$survived == 1
results <- table(actual.survival.test, pred.survival.test)
labels <- round(100*prop.table(results, 2), 1)
mosaic(results, pop = FALSE, main = "Tree Evaluated on Test Data")
labeling_cells(text = labels, margin = 0)(results)
round(prop.table(table(test$survived,pred.test[,2]>0.5), 1)*100, 2)   # Correctly predicted from test set
round(prop.table(table(test$survived,test$prediction), 1)*100, 2)   # Correctly predicted from test set
prop.table(table(test$survived,test$prediction), 1)
prop.table(table(test$prediction, test$survived), 1)
table(test$prediction, test$survived)
prop.table(table(test$prediction, test$survived), 1)
prop.table(table(test$prediction, test$survived), 2)
library(AUC)
install.packages("AUC")
library(AUC)
auc(test$predictions,test$survived))
auc(test$predictions,test$survived)
test$survived
test$predictions
auc(test$prediction,test$survived)
test$prediction
test$survived
library(ROCR)
install.packages("ROCR")
library(ROCR)
pred <- prediction(predictions=test$predict_proba, labels=test$survived)
pred
pred
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, col="blue", add=TRUE)
plot(perf, col="blue", add=TRUE)
performance(pred, measure = "auc")
performance(pred, measure = "tpr")
rf <- randomForest(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
importance = TRUE,
na.action = na.omit)
library(randomForest)   # For creating the forest
rf <- randomForest(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
importance = TRUE,
na.action = na.omit)
sort(round(rf$importance[,4], 1), decreasing = TRUE) # Average decrease in the gini coefficient
sort(rf$importance[,4], 1)
sort(rf$importance[,4])
rf$importance[,4]
rf$importance
rf$importance[,4] # Average decrease in the gini coefficient
rf
?randomForest
rf$importance
rf <- randomForest(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train)
rf <- randomForest(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
na.action = na.rpart)
rf <- randomForest(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
na.action = na.omit)
summary(rf)
rd
rf
rf
summary(rf)
rf$variable.importance
rf$importance
rf <- randomForest(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
na.action = na.omit,
importance = FALSE)
rf$importance
rf <- randomForest(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
na.action = na.omit,
localImp = FALSE,
importance = FALSE)
rf$importance
test$predict_proba <- predict(rf, test)[,2]
test$prediction <- predict_proba > 0.5
# Acccuracy in terms of classification rate (with 0.5 threshhold)
sum(test$prediction == test$survived) / nrow(test)
# Confusion Matrix (rows are predictions, colums are actuals)
table(test$prediction, test$survived)
prop.table(table(test$prediction, test$survived), 2)
# Sensitivity: When the person survived, how often did it predict survival?
# A.K.A. True Positive Rate
test_lived = test[test$survived,]
sum(test_lived$prediction == test_lived$survived) / nrow(test_lived)
# Specificty: When the person died, how often did it predict death?
# A.K.A. True Negative Rate
test_died = test[!test$survived,]
sum(test_died$prediction == test_died$survived) / nrow(test_died)
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class")
test$predict_proba <- predict(tree, test)[,2]
test$prediction <- predict_proba > 0.5
# Acccuracy in terms of classification rate (with 0.5 threshhold)
sum(test$prediction == test$survived) / nrow(test)
# Confusion Matrix (rows are predictions, colums are actuals)
table(test$prediction, test$survived)
prop.table(table(test$prediction, test$survived), 2)
# Sensitivity: When the person survived, how often did it predict survival?
# A.K.A. True Positive Rate
test_lived = test[test$survived,]
sum(test_lived$prediction == test_lived$survived) / nrow(test_lived)
# Specificty: When the person died, how often did it predict death?
# A.K.A. True Negative Rate
test_died = test[!test$survived,]
sum(test_died$prediction == test_died$survived) / nrow(test_died)
predict(rf, test)
predict(rf, test)
prop.table(table(test$prediction, test$survived), 2)
table(test$prediction, test$survived)
