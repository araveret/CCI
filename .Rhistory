pred1.os = predict(model1, newdata = test, type = "class")
sum(pred1.is == train$survived) / length(train$survived)
sum(pred1.os == test$survived) / length(test$survived)
table(pred1.is, train$survived)
100*round(prop.table(table(pred1.is, train$survived)), 2) # % of values in each bucket
100*round(prop.table(table(pred1.is, train$survived)), 3) # % of values in each bucket
round(prop.table(table(pred1.is, train$survived)), 2) # % of values in each bucket
round(prop.table(table(pred1.is, train$survived), 1), 2) # Across then down
round(prop.table(table(pred1.is, train$survived), 2)) # Down then across
prop.table(table(pred1.is, train$survived), 2)# Down then across
round(prop.table(table(pred1.is, train$survived), 2), 2) # Down then across
?ls
rm(list = ls())
gc()
getwd()
setwd("C:/Users/josdavis/Documents")
setwd("C:/Users/josdavis/Downloads")
getwd()
setwd("C:/Users/josdavis/Documents")
data = read.table("titanic.csv", sep = ",", header = TRUE)
str(data)
head(data, 8)
summary(data)
str(data$age)
head(data$age, 8)
summary(data$age)
write.table(data[1:100,], "newdata.csv", sep = ",", row.names = FALSE)
getwd()
titanic = read.table("titanic.csv", sep = ",", header = TRUE)
sample = read.table("titanic.csv", sep = ",", header = TRUE)
save.image("titanic.RData")
rm(list = ls()); gc()
load("titanic.RData")
rm(sample, titanic)
gc()
data$age2 = data$age
head(data)
subs = data[data$age>30 & data$pclass == "3rd", ]
summary(subs) # Only take the 3rd class people over 30
summary(data)
View(data)
View(subs)
dim(subs)
dim(subs)[1]
dim(subs)[1] / dim(data)[1] # % of observations in the subsetted data
summary(data$age)
mean(data$age2)
mean(data$age2, na.rm = TRUE)
data$age2[is.na(data$age2)]
is.na(data$age2)
is.na(data$age2)
data$age2[is.na(data$age2)]
rm(list=ls()) # clear the workspace
set.seed(973487) # Ensures you can repeat the results
library(caret)
library(rpart)
setwd("C:/Users/josdavis/Documents")
titanic = read.table("titanic.csv", sep = ",", header = TRUE)
idx = createDataPartition(titanic$survived, p = 0.50,list=FALSE)
train = titanic[idx,]
test = titanic[-idx,]
model1 = rpart(as.factor(survived) ~ pclass + sex + age + sibsp, data = train)
library(partykit)
plot(as.party(model1))
names(model1)
round(model1$variable.importance, 1)
pred1.is = predict(model1, newdata = train, type = "class")
pred1.os = predict(model1, newdata = test, type = "class")
head(pred1.is)
head(train$survived)
head(train$survived)
sum(pred1.is == train$survived) / length(train$survived)
sum(pred1.os == test$survived) / length(test$survived)
table(pred1.is, train$survived)
table(pred1.os, test$survived)
round(prop.table(table(pred1.is, train$survived)), 2) # % of values in each bucket
prop.table(table(pred1.is, train$survived)) # % of values in each bucket
round(prop.table(table(pred1.is, train$survived), 1), 2) # Across (based on predictions)
round(prop.table(table(pred1.is, train$survived), 2), 2) # Down (based on actuals)
?predict
?predict.rpart
pred1.is = predict(model1, newdata = train, type = "prob")
head(pred1.is)
head(pred1.is[,2])
head(pred1.is[,1])
pred1.is = predict(model1, newdata = train, type = "vector")
head(pred1.is)
datasets()
dataset()
data()
data(package = .packages(all.available = TRUE))
datasets()
UN
data()
BOD
UN
data(package = .packages(all.available = TRUE))
cynipids
data(cynipids)
load(cynipids)
load(url('http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic3.sav'))
View(titanic3)
fruits = c('apple', 'banana', 'cherry', 'plum')
len(fruits)
length(fruits)
for (i in 1:length(fruits)){
print fruits[i]
}
fruits = c('apple', 'banana', 'cherry', 'plum')
for (i in 1:length(fruits)){
print fruits[i]
}
for (i in 1:length(fruits)){
fruits[i]
}
print(fruits[1])
for (i in 1:length(fruits)){
print(fruits[i])
}
var1 = 10
if (var1 > 5){
print("More than 5")
}
else(var1 < 5){
print("Less than 5")
}
else{
print("5")
}
if(var1 > 5){
print("More than 5")
}
elseif(var1 < 5){
print("Less than 5")
}
elseif{
print("5")
}
var1 = 10
if (var1 > 5) {
print("More than 5")
} else (var1 < 5){
print("Less than 5")
} else {
print("5")
}
if (var1 > 5) {
print("More than 5")
} else if (var1 < 5){
print("Less than 5")
} else {
print("5")
}
if (var1 > 5) {
print("More than 5")
} else if (var1 < 5){
print("Less than 5")
} else {
print("5")
}
load("~/Projects/VA/Task 3/R Scripts/OPM Import.R")
install.packages("swirl")
library(swirl)
install_from_swirl("Regression Models")
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class")
library(rpart)          # For creating the tree
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class")
rm(list=ls()); gc()     # clear the workspace
set.seed(973487)        # Ensures you can repeat the results
library(rpart)          # For creating the tree
library(partykit)       # For plotting the tree
setwd("C:/Users/josdavis/Documents/Personal/GitHub/CCI")
# Get the data
data <- read.csv("titanic.csv", header = TRUE)
data$survived = data$survived == 'survived'
# Split into training and testing sets
idxs <- runif(nrow(data)) < 0.7   # Random Indices
train <- data[idxs, ]             # Training set
test  <- data[!idxs, ]            # Testing set
summary(train)
rm(idxs)
rm(idxs, data)
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class")
# View the tree
tree
# Plot the tree
plot(as.party(tree))
tree$variable.importance
tree <- rpart(survived ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class")
# View the tree
tree
# Plot the tree
plot(as.party(tree))
# View the details of each node
summary(tree)
# View the importance scores (avg. decrease in gini coefficient)
tree$variable.importance
plot(as.party(tree))
pr <- glm(survived ~ pclass + sex + age + sibsp + parch,
family = binomial(probit),
data = train)
pr
summary(pr)
lr
lr
lr <- glm(survived ~ pclass + sex + age + sibsp + parch,
family = binomial(logit),
data = train
)
lr
lr$Coefficients
lr$Coefficients
lr$coefficients
lr$coefficients[1]
lr$coefficients[2]
lr$coefficients[3]
lr$coefficients
pr$coefficients
summary(lr)
summary(lr)$coefficients
summary(lr)$coefficients$Estimate
summary(lr)$coefficients$[1]
summary(lr)$coefficients$[,1]
summary(lr)$coefficients[,1]
summary(lr)$coefficients[,2]
summary(lr)$coefficients[,3]
summary(lr)$coefficients[,4]
summary(lr)$coefficients
summary(lr)$coefficients[,4]
summary(lr)$coefficients[,c(1, 4)]
?glm
lr <- glm(survived ~ pclass + sex + age + sibsp + parch,
family = binomial(link = logit),
data = train,
na.action = na.omit)
test$predict_proba <- predict(or, test)
predict(lr, test)
data <- read.csv("titanic.csv", header = TRUE)
?na.omit
na.omit(data)
data = na.omit(data)
idxs <- runif(nrow(data)) < 0.7   # Random Indices
train <- data[idxs, ]             # Training set
test  <- data[!idxs, ]            # Testing set
rm(idxs, data)
summary(train)
lr <- glm(survived ~ pclass + sex + age + sibsp + parch,
family = binomial(link = logit),
data = train)
predict(lr, test)
test$predict_proba <- predict(lr, test)
test$prediction <- predict_proba > 0.5
test
predict(lr, type = "response", newdata = test)
?predict
lr <- glm(survived ~ pclass + sex + age + pclass:age + sibsp + parch,
family = binomial(link = logit),
data = train)
lr
lr <- glm(survived ~ sex + pclass*age + sibsp + parch,
family = binomial(link = logit),
data = train)
lr
lr <- glm(survived ~ C(pclass) + parch,
family = binomial(link = logit),
data = train)
lr
?glm
lr <- glm(survived ~ C(pclass, "2nd") + parch,
family = binomial(link = logit),
data = train)
lr <- glm(survived ~ C(pclass, treatment) + parch,
family = binomial(link = logit),
data = train)
lr
lr <- glm(survived ~ pclass + C(parch),
family = binomial(link = logit),
data = train)
lr <- glm(survived ~ pclass + C(sibsp),
family = binomial(link = logit),
data = train)
summary(train)
head(train)
head(train, 25)
lr <- glm(survived ~ C(pclass) + as.factor(parch),
family = binomial(link = logit),
data = train)
lr
lr <- glm(survived ~ C(pclass) + C(parch),
family = binomial(link = logit),
data = train)
lr <- glm(survived ~ C(pclass),
family = binomial(link = logit),
data = train)
library(ks)
data(faithful)
H <- Hpi(x=faithful)
fhat <- kde(x=faithful, H=H)
plot(fhat, display="filled.contour2")
points(faithful, cex=0.5, pch=16)
install.packages("ks")
H <- Hpi(x=faithful)
fhat <- kde(x=faithful, H=H)
plot(fhat, display="filled.contour2")
points(faithful, cex=0.5, pch=16)
Hpi(x=faithful)
faithful
train[,-"survivded"]
train[,-"survivded"]
train[,-c("survivded")]
y <- train$survived
y
train[,-c("survived")]
subset( train, select = -survived )
train
X <- subset(train, select = -survived)
y <- train$survived
X <- train[,survived:=NULL]
X <- train[,(survived):=NULL]
X <- train[,("survived"):=NULL]
X <- train[,!names(train) %in% c("survived")]
X
X
head(X)
?glm
lr <- glm(X, y,
family = binomial(link = logit),
data = train)
lr <- glm(X, y, family = binomial(link = logit))
head(X)
lr <- glm(X$parch, y, family = binomial(link = logit))
lr <- glm(survived ~ C(pclass) + sex + age + sibsp + parch,
family = binomial(link = logit),
data = train)
lr
lr <- glm(survived ~ pclass + sex + age + as.factor(sibsp) + parch,
family = binomial(link = logit),
data = train)
lr
lr
hist(train$sibsp)
hist(train$sibsp, 6)
head(train)
log(10)
log(exp(10))
lr <- glm(survived ~ pclass + sex + log(age) + sibsp + parch,
family = binomial(link = logit),
data = train)
lr
lr <- glm(survived ~ pclass + sex + age + sibsp + parch,
family = binomial(link = logit),
data = train)
lr
#############################################
#
#     CLASSIFICATION & REGRESSION TREES
#                 (CART)
#
#############################################
# ===========================================
#     Set up the workspace and get the data
# ===========================================
rm(list=ls()); gc()     # clear the workspace
set.seed(973487)        # Ensures you can repeat the results
library(rpart)          # For creating the tree
library(partykit)       # For plotting the tree
setwd("C:/Users/josdavis/Documents/Personal/GitHub/CCI")
# Get the data
data <- read.csv("titanic.csv", header = TRUE)
data$survived = data$survived == 'survived'
# Split into training and testing sets
idxs <- runif(nrow(data)) < 0.7   # Random Indices
train <- data[idxs, ]             # Training set
test  <- data[!idxs, ]            # Testing set
rm(idxs, data)
summary(train)
# ===========================================
#       Create the tree
# ===========================================
tree <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class")
predict(tree, test)
predict(tree, type = "response", newdata = test)
predict(tree, type = "prob", newdata = test)
predict(tree, type = "vector", newdata = test)
predict(tree, type = "class", newdata = test)
?predict
predict(tree, type = "response", newdata = test)
predict(tree, type = "matrix", newdata = test)
?rpart.predict
predict(tree, type = "prob", newdata = test)
predict(tree, type = "prob", newdata = test)[,2]
rm(list=ls()); gc()     # clear the workspace
set.seed(973487)        # Ensures you can repeat the results
library(rpart)          # For creating the tree
library(partykit)       # For plotting the tree
setwd("C:/Users/josdavis/Documents/Personal/GitHub/CCI")
# Get the data
data <- read.csv("titanic.csv", header = TRUE)
data$survived = data$survived == 'survived'
# Split into training and testing sets
idxs <- runif(nrow(data)) < 0.7   # Random Indices
train <- data[idxs, ]             # Training set
test  <- data[!idxs, ]            # Testing set
rm(idxs, data)
# ===========================================
#       Create the model to "tune"
# ===========================================
model <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class")
model <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class")
# Generate predictions (both probabilities and class predictions)
test$prediction <- predict(model, type = "prob", newdata = test)[,2] > 0.5
# Acccuracy in terms of classification rate (with 0.5 threshhold)
sum(test$prediction == test$survived) / nrow(test)
train(as.factor(survived) ~ pclass + sex + age + sibsp + parch, data = train, method = "rpart")
library(caret)
train(as.factor(survived) ~ pclass + sex + age + sibsp + parch, data = train, method = "rpart")
model <- train(as.factor(survived) ~ pclass + sex + age + sibsp + parch, data = train, method = "rpart")
model
model$bestTune
tune_model <-train(as.factor(survived) ~ pclass + sex + age + sibsp + parch, data = train, method = "rpart")
tune_results <-train(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "rpart")
tune_results$bestTune
tune_model <- rpart(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
method = "class",
control = rpart.control(cp = tune_results$bestTune))
# Generate predictions (both probabilities and class predictions)
test$prediction <- predict(tune_model, type = "prob", newdata = test)[,2] > 0.5
# Acccuracy in terms of classification rate (with 0.5 threshhold)
sum(test$prediction == test$survived) / nrow(test)
?trainControl
?train
getModelInfo
getModelInfo()
data.frame(n = c(2, 3, 5))
tc <- trainControl(method = "cv", number = 5)
tune_results <-train(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
metric = "ROC",
method = "rpart",
trainControl = tc,
tuneGrid = data.frame(maxDepth = c(1, 2, 3, 4, 5, 6, 7, 8, 9)))
tc <- trainControl(method = "cv", number = 5)
tune_results <-train(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
metric = "ROC",
method = "rpart2",
trainControl = tc,
tuneGrid = data.frame(maxDepth = c(1, 2, 3, 4, 5, 6, 7, 8, 9)))
tc <- trainControl(method = "cv", number = 5)
tune_results <-train(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
metric = "ROC",
method = "rpart2",
trainControl = tc,
tuneGrid = data.frame(maxdepth = c(1, 2, 3, 4, 5, 6, 7, 8, 9)))
tune_results <-train(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = train,
metric = "accuracy",
method = "rpart2",
trainControl = tc,
tuneGrid = data.frame(maxdepth = c(1, 2, 3, 4, 5, 6, 7, 8, 9)))
data <- na.omit(data)
tune_results <-train(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = data,
metric = "accuracy",
method = "rpart2",
trainControl = tc,
tuneGrid = data.frame(maxdepth = c(1, 2, 3, 4, 5, 6, 7, 8, 9)))
data <- read.csv("titanic.csv", header = TRUE)
data$survived = data$survived == 'survived'
data <- na.omit(data)
tune_results <-train(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = data,
metric = "accuracy",
method = "rpart2",
trainControl = tc,
tuneGrid = data.frame(maxdepth = c(1, 2, 3, 4, 5, 6, 7, 8, 9)))
warnings()
tune_results <-train(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = data,
metric = "Accuracy",
method = "rpart2",
trainControl = tc,
tuneGrid = data.frame(maxdepth = c(1, 2, 3, 4, 5, 6, 7, 8, 9)))
warnings()
tune_results <-train(as.factor(survived) ~ pclass + sex + age + sibsp + parch,
data = data,
metric = "Accuracy",
method = "rpart2",
trainControl = tc,
tuneGrid = data.frame(maxdepth = c(1, 2, 3, 4, 5, 6, 7, 8)))
warnings()
tune_results$bestTune
tune_results$tuneGrid
?train
